Priority Seq: atom > power > factor > term > expr

expr            
                : Keyword: VAR, Identifier, EQ, expr
                : comp-expr (( AND | OR ) comp-expr)*
                
comp-expr       
                : NOT comp-expr
                : arith-expr (( == | < | <= | > | >= ) arith-expr) *

arith-expr      
                : term (( + | - ) term) *

term            
                : factor (( * | / ) factor) *

factor          
                : ( + | - ) factor
                : power

power           
                : call (POW factor)*

call
                : atom (LPAR  (expr (COMMA expr)*)?  RPAR)?


atom            
                : INT | FLOAT | STRING | Identifier
                : LPAR expr RPAR 
                : list-expr
                : if-expr
                : for-expr
                : while-expr
                : func-def

list-expr
                : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr         
                : KEYWORD:IF expr KEYWORD:THEN expr
                :  (KEYWORD:ELIF expr KEYWORD:THEN expr)*
                :  (KEYWORD:ELSE expr)?

for-expr
                : KEYWORD:FOR Identifier EQ expr KEYWORD:TO expr (KEYWORD:STEP expr)? KEYWORD:THEN expr   

while-expr
                : KEYWORD:WHILE expr THEN expr

func-def  
                : KEYWORD:fnc  Identifier(?)  LPAR (Identifier (COMMA Identifier)*)? RPAR  ARROW  EXP

* means they could have multiple or no +- inside
(factor can have only one number therefore no *)

['?' stands for optional]  
